datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  clients       Client[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Priority {
  None
  Low
  Medium
  High
}

enum Status {
  Open
  InProgress
  Done
  Closed
}

model Note {
  id String @id @default(cuid())
  title String
  content String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(cuid())
  name String
  description String?
  lumpSum Decimal?  @db.Money
  priority Priority? @default(None)
  startDate DateTime?
  dueDate DateTime? 
  sections Section[]
  tasks   Task[]
  notes Note[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  client Client? @relation(fields: [clientId, clientName], references: [id, name])
  clientId String?
  clientName String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  @@unique([id, name])
}

model Client {
  id String @id @default(cuid())
  name String
  companyName String? 
  phone String?
  email String? @unique
  businessAddress String?
  contacts  Contact[]
  project   Project[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  @@unique([id, name])
}

model Contact {
  id  String @id @default(cuid())
  name String
  email String
  phoneNumber String?
  jobTitle  String?
  client  Client @relation(fields: [clientId], references: [id])
  clientId String
}

model Task {
  id String @id @default(cuid())
  name String
  status Status @default(Open)
  priority  Priority @default(None)
  isComplete  Boolean @default(false)
  description String?
  dueDate  DateTime?  
  tags  Tag[]
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  section  Section @relation(fields: [sectionId], references: [id])
  sectionId  String
  createdAt   DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Tag {
  id String @id @default(cuid())
  name  String
  task Task? @relation(fields: [taskId], references: [id])
  taskId String?
}

model Section {
  id String @id @default(cuid())
  name  String  @unique
  tasks Task[]
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String 
}