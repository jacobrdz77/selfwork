datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
 session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tasks         Task[]
  clients       Client[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

model Project {
  id String @id @default(cuid())
  name String
  priority Priority @default(NONE)
  startDate DateTime @default(now())
  dueDate DateTime? 
  taskLists TaskList[]
  client Client? @relation(fields: [clientId], references: [id])
  clientId String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  description String?
  hourlyRate Int?
  @@unique([id, name])
}

model Client {
  id String @id @default(cuid())
  name String 
  description String?
  phone String?
  email String? @unique
  website String? 
  businessAddress String?
  projects Project[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  contacts  Contact[]
}

model Contact {
  id  String @id @default(cuid())
  firstName String
  lastName String
  email String
  phoneNumber String?
  jobTitle  String?
  client  Client @relation(fields: [clientId], references: [id])
  clientId String
}

model LogTime {
  id  String @id @default(cuid())
  startDate  DateTime  @default(now())
  endDate  DateTime  @default(now())
  startTime DateTime
  endTime   DateTime  
  timeSpent   DateTime
  description String?
  task  Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Task {
  id String @id @default(cuid())
  createdAt   DateTime  @default(now())
  name String
  description String?
  isComplete  Boolean 
  priority  Priority @default(NONE)
  tags  Tag[]
  loggedTime  LogTime[]
  startDate  DateTime?  @default(now())
  endDate  DateTime?  @default(now())
  user User @relation(fields: [ userId], references: [id], onDelete: Cascade)
  userId String
  taskList  TaskList @relation(fields: [taskListId, projectId, projectName], references: [id, projectId, projectName])
  taskListId  String
  projectId String
  projectName String
}

model Tag {
  id String @id @default(cuid())
  name  String
  task Task? @relation(fields: [taskId], references: [id])
  taskId String
}

model TaskList {
  id String @id @default(cuid())
  project Project @relation(fields: [projectId, projectName], references: [id, name], onDelete: Cascade)
  projectId String 
  projectName String
  name  String  @unique
  notes  String?
  tasks Task[]
  @@unique([id, projectId, projectName])
}