datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                         String      @id @default(cuid())
  name                       String
  email                      String?     @unique
  emailVerified              DateTime?
  mobilePhone                String?
  image                      String?
  lastUsingWorkspaceId       String?
  accounts                   Account[]
  sessions                   Session[]
  clients                    Client[]
  assignedTasks              Task[]
  ownedWorkspaces            Workspace[] @relation("Owner")
  involvedWorkspaces         Workspace[]
  ownedProjects              Project[]   @relation("Owner")
  involvedProjects           Project[]   @relation("Members")
  userSections               Section[]   @relation("UserSections")
  userAssignedTasksSection   Section?    @relation("UserNewTasksSection", fields: [userAssignedTasksSectionId], references: [id])
  userAssignedTasksSectionId String?

  @@unique([userAssignedTasksSectionId])
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  inviteLinks InviteLink[]
  projects    Project[]
  members     User[]
  owner       User      @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
}

enum Priority {
  None
  Low
  Medium
  High
}

enum TaskStatus {
  Open
  InProgress
  InReview
  Delayed
  Done
}

enum ProjectStatus {
  Active
  OnTrack
  OffTrack
  OnHold
  InTesting
  Approved  
}


enum Color {
  Classic
  Maroon
  OrangeYellow
  YellowGreen
  Forest
  BlueGreen
  Aqua
  Blue
  Purple
  PinkPurple
  Pink
  Oat
}

enum ClientStatus {
  Active
  Pending
  Closed
}

model InviteLink {
  id          String    @id @default(uuid()) 
  expirationDate DateTime 
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  url       String
  @@unique([workspaceId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  lumpSum     Decimal?  @db.Money
  monthlyPay  Decimal?  @db.Money
  priority    Priority? @default(None)
  status      ProjectStatus @default(Active)
  startDate   DateTime?
  dueDate     DateTime?
  order       Int?      @default(autoincrement())
  iconColor   Color     @default(Classic)
  owner       User     @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  client      Client?   @relation(fields: [clientId], references: [id])
  clientId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  sections    Section[]
  sketches    Sketch[]
  members     User[]    @relation("Members")
  inviteLinks InviteLink[]
  @@unique([id, name])
}

model Client {
  id              String    @id @default(cuid())
  name            String
  companyName     String?
  phone           String?
  email           String?   @unique
  businessAddress String?
  projects        Project[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  order           Int?      @default(autoincrement())
  status          ClientStatus    @default(Pending)
  totalMonthly    Decimal   @db.Money @default(0)
  totalLumpSum    Decimal   @db.Money @default(0)

  @@unique([id, name])
}


model Task {
  id          String    @id @default(cuid())
  name        String
  description String?
  priority    Priority  @default(None)
  status      TaskStatus @default(Open)
  isComplete  Boolean   @default(false)
  startDate   DateTime?
  dueDate     DateTime?
  tags        Tag[]
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
  assignee    User?     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId  String?
  order Int? @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  color   Color
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Section {
  id           String   @id @default(cuid())
  name         String
  tasks        Task[]
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String?
  user         User?    @relation("UserSections", fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  userAssigned User?    @relation("UserNewTasksSection")
  order Int?   
  createdAt   DateTime  @default(now())
}


model Sketch {
  id          String   @id @default(cuid())
  name        String
  elements    Json
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
