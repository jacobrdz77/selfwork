datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String      @id @default(cuid())
  name                 String?
  email                String?     @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  clients              Client[]
  lastUsingWorkspaceId String?
  ownedWorkspaces      Workspace[] @relation("Owner")
  involvedWorkspaces   Workspace[] 
  ownedProjects        Project[]   @relation("Owner")
  involvedProjects     Project[]   @relation("Members")
}

model Workspace {
  id                         String    @id @default(cuid())
  name                       String
  description                String?
  projects                   Project[]
  owner                      User      @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                    String
  members                    User[]    
  userSections               Section[] @relation("UserSections")
  userAssignedTasksSection   Section?   @relation("NewTasksSection", fields: [userAssignedTasksSectionId], references: [id])
  userAssignedTasksSectionId String?

  @@unique([userAssignedTasksSectionId])
}

enum Priority {
  None
  Low
  Medium
  High
}

enum Status {
  Open
  InProgress
  Done
  Closed
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Color {
  Classic
  Maroon
  OrangeYellow
  YellowGreen
  Forest
  BlueGreen
  Aqua
  Blue
  Purple
  PinkPurple
  Pink
  Oat
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  lumpSum     Decimal?  @db.Money
  priority    Priority? @default(None)
  startDate   DateTime?
  dueDate     DateTime?
  iconColor   Color     @default(Classic)
  sections    Section[]
  tasks       Task[]
  notes       Note[]
  owner       User?     @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String?
  members     User[]    @relation("Members")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  client      Client?   @relation(fields: [clientId, clientName], references: [id, name])
  clientId    String?
  clientName  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@unique([id, name])
}

model Client {
  id              String    @id @default(cuid())
  name            String
  companyName     String?
  phone           String?
  email           String?   @unique
  businessAddress String?
  contacts        Contact[]
  project         Project[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  @@unique([id, name])
}

model Contact {
  id          String  @id @default(cuid())
  name        String
  email       String
  phoneNumber String?
  jobTitle    String?
  client      Client  @relation(fields: [clientId], references: [id])
  clientId    String
}

model Task {
  id          String    @id @default(cuid())
  name        String
  status      Status    @default(Open)
  priority    Priority  @default(None)
  isComplete  Boolean   @default(false)
  description String?
  dueDate     DateTime?
  tags        Tag[]
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  section     Section   @relation(fields: [sectionId], references: [id])
  sectionId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Section {
  id                    String     @id @default(cuid())
  name                  String
  tasks                 Task[]
  project               Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId             String?
  userWorkspace         Workspace? @relation("UserSections", fields: [userWorkspaceId], references: [id], onDelete: Cascade)
  userWorkspaceId       String?
  userAssignedWorkspace Workspace? @relation("NewTasksSection")
}
