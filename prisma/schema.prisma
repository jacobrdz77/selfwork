datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
 session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
  clients       Client[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

model Note {
  id String @id @default(cuid())
  title String
  content String
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Website {
  id String @id @default(cuid())
  name String
  taskLists TaskList[]
  lumpSum Int?
  priority Priority? @default(NONE)
  dueDate DateTime? 
  notes Note[]
  description String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  client Client? @relation(fields: [clientId, clientName], references: [id, name])
  clientId String
  clientName String
  createdAt DateTime @default(now())
  @@unique([id, name])
}

model Client {
  id String @id @default(cuid())
  name String
  companyName String? 
  phone String?
  email String? @unique
  businessAddress String?
  contacts  Contact[]
  website   Website[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  @@unique([id, name])
}

model Contact {
  id  String @id @default(cuid())
  name String
  email String
  phoneNumber String?
  jobTitle  String?
  client  Client @relation(fields: [clientId], references: [id])
  clientId String
}

model Task {
  id String @id @default(cuid())
  createdAt   DateTime  @default(now())
  name String
  priority  Priority @default(NONE)
  description String?
  dueDate  DateTime?
  isComplete  Boolean 
  labels  Label[]
  taskList  TaskList @relation(fields: [taskListId], references: [id])
  taskListId  String
}

model Label {
  id String @id @default(cuid())
  name  String
  task Task? @relation(fields: [taskId], references: [id])
  taskId String?
}

model TaskList {
  id String @id @default(cuid())
  name  String  @unique
  tasks Task[]
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId String 
  @@unique([id, websiteId ])
}